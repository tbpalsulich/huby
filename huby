#!/usr/bin/ruby
require 'fileutils'		# Used for directory creation.

# Hash to hold the user's preferences (like where to output files, what mode we're running in, etc.)
prefs = {}
prefs[:run] = ARGV.include?("run")
prefs[:verbose] = ARGV.include?("-v") or ARGV.include?("-V") # Print a little diagnostic info.
prefs[:very_verbose] = ARGV.include?("-V")	# Print more info.
prefs[:init] = ARGV.include?("init")		# Create config, header, and footer files.
if prefs[:init]
	prefs[:output_folder] = ARGV[1] unless ARGV.size < 2	# Optionally supply output folder
else
	prefs[:output_folder] = "public"			# Default to the public folder. Change in config.huby.
end
if !prefs[:init] and !prefs[:run]			# We're not running or initializing, so print usage info.
	puts "Usage:"
	puts "   init [output folder]:"
	puts "        Creates a new huby project, looking through all of [output folder]."
	puts "   run: Run huby, generating the pages from the .huby files."
	puts "   -v: Print verbose state information while running."
	puts "   -V: Print very verbose state information while running."
elsif prefs[:init]
	configs = []		# Array to hold all of the filenames of files we need to create/add to config.huby.
	puts "Creating huby-meat/bodies/ directory."
	FileUtils.mkdir_p("huby-meat/bodies")
	files = Dir.glob(File.join(prefs[:output_folder], "**", "*")) # Find all files in the output folder.
	files.each do |file|
		if File.file?(file)	# Ignore directories.
			content = File.open(file, 'r') {|file| file.read()}			# Copy the contents of the file in order to write to the body.
			file.sub!(prefs[:output_folder] + "/", "")					# Make file just the name relative to output root.
			if file.include?("/")					# If the file has extra directories, mimic those directories in the bodies folder.
				puts "Creating subdirectory " + file[0..file.rindex("/")]
				FileUtils.mkdir_p("huby-meat/bodies/" + file[0..file.rindex("/")])
			end
			File.open("huby-meat/bodies/" + file + ".huby", 'w') {|output|
				puts "Creating huby-meat/bodies/" + file + ".huby"
				output.puts(content)					# Write the content to the otherwise empty *.huby files.
			}
			configs.push([file.sub(".*", ""), file])	# Push to the configs array to store the filename for config.huby later.
		end
	end
	puts "Creating huby-meat/header.huby."
	File.open("huby-meat/header.huby", 'w') {|header|		# User must fix this file.
		header.puts("# Copy and paste the header common to all of your pages.")
	}
	puts "Creating huby-meat/footer.huby."
	File.open("huby-meat/footer.huby", 'w') {|footer|		# User must also fix this file.
		footer.puts("# Copy and paste the footer common to all of your pages.")
	}
	puts "Creating huby-meat/config.huby."
	File.open("huby-meat/config.huby", 'w') {|config|				# Will definitely need to check this file out too.
		config.puts("output_folder => #{prefs[:output_folder]}")	# When running, will read this line to get folder.
		config.puts("@header => @header.huby")
		config.puts("@footer => @footer.huby")
		configs.each do |pair|
			config.puts(pair[0] + "=>" + pair[1] + ",")			# Syntax of config.huby is `key => value,` ... `key_n => value_n`
		end
	}
elsif prefs[:run]
	configFile = File.open("huby-meat/config.huby")
	config = {}			# Hash we'll store all of the replacement values in.
	configFile.each_with_index do |pair, line_num|
		pair = pair.split("=>")				# Split each pair into key and value.
		unless pair[0].nil? or pair[1].nil?
			if pair.size > 2
				puts "Syntax error in config.huby near '" + pair[0].strip + "' on line " + (line_num + 1).to_s + "."
				exit
			else
				pair.each do |item|
					item.strip! 					# Remove any surrounding whitespace.
				end
				if pair[1].include?("@")			# '@' indicates a file, so replace the value with that file's content.
					pair[1] = File.open("huby-meat/" + pair[1].delete("@")) {|file| file.read()}
				elsif pair[0].end_with?("_button")
					pair[1] = pair[1].split(",")
					pair[1][0].strip! unless pair[1][0].nil?
					pair[1][1].strip! unless pair[1][1].nil?
				end
				if pair[0].include?("#")
					# Ignore this line, it's a comment.
				elsif pair[0].eql?("output_folder")		# Set the output folder based on the config.huby entry.
					prefs[:output_folder] = pair[1]
				else
					config.merge!({pair[0] => pair[1]})	# If we've gotten here, add the values to the hash.
				end
			end
		end
	end

	pattern = File.join("huby-meat/bodies", "**", "*.huby")		# Find all .huby files.
	bodies = Dir.glob(pattern)
	if prefs[:verbose] 
		puts "Number of bodies: #{bodies.size}"
	end
	bodies.each do |file| 
		config_key = ""		# Start by resetting the string values.
		old_value = ""
		filename = ""
		old_button_value = ""
		old_slash_button_value = ""
		old_super_value = ""
		super_key = ""
		# filename will hold the directory and name of each file to be written relative to the output root.
		filename = file[file.index("huby-meat") + "huby-meat/bodies/".length .. file.index(".huby") - 1]
		config_key = filename[0..filename.index(".") - 1]	# Used to look into the config hash.
		old_value = config[config_key]						# Store the old hash value so we can change the value.
		# All config entries are relative to output root. So, adjust for it when not actually *in* output root.
		config[config_key] = "#"		# Don't let pages link to themselves.
		if config.has_key?(config_key + "_button")			# If there is a button for this page (like in a navbar), set it to active.
			old_button_value = config[config_key + "_button"]
			if config[config_key + "_button"].size == 2		# First entry is inactive button, second is active button.
				config[config_key + "_button"] = config[config_key + "_button"][1]		# Activate the button!
			elsif config[config_key + "_button"].size == 1				# Tied to another button.
				super_key = config[config_key + "_button"][0][1..-1]	# Figure out what the other button is. Doesn't follow chains!
				old_super_value = config[super_key]
				config[super_key] = config[super_key][1].strip			# Activate the super button.
			end
			puts
		end
		filename = Dir.getwd + "/" + prefs[:output_folder] + "/" + filename 	# Now filename the full path of the file.
		if prefs[:verbose]
			puts
			puts "filename: " + filename
			puts "config_key: " + config_key
			puts "old_value: " + old_value
		end
		body = File.open(file) {|f| f.read()}		# Read the contents into memory. We still need to replace {{{}}} entries.
		config.each {|key, value| 
			if value.is_a? Array
				value = value[0]
			end
			if prefs[:very_verbose]
				puts key.to_s + " => " + value.to_s
			end
			# Adjust for folders unless you aren't actually printing a link (button, comment, files, etc).
			value = "../" * old_value.scan("\/").size + value unless key.include?("_button") or value == "#" or value == "" or key.include?("@")
			body.gsub!("{{{" + key.to_s + "}}}", value.to_s)
		}
		FileUtils.mkdir_p(filename[0..filename.rindex("/")]) unless File.exists?(filename)	# Make sure we can write the file.
		File.open(filename, 'w') {|output|	# Don't think, just write.
			output.puts(body)
		}
		# Reset the config hash.
		config[config_key] = old_value
		if config.has_key?(config_key + "_button") 
			config[config_key + "_button"] = old_button_value
		end
		if !old_super_value.eql?("")
			config[super_key] = old_super_value
		end
	end
end